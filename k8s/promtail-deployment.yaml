apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: default
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      # PostgreSQL specific log collection
      - job_name: postgresql-logs
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - cri: {}
          # PostgreSQL log parsing pipeline
          - match:
              selector: '{container="postgresql"}'
              stages:
                # Parse PostgreSQL log format
                - regex:
                    expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3} \w+) \[(?P<pid>\d+)\] (?P<level>\w+):\s*(?P<message>.*)'
                # Parse additional PostgreSQL fields
                - regex:
                    expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3} \w+) \[(?P<pid>\d+)\] (?:(?P<user>\w+)@(?P<database>\w+) )?(?P<level>\w+):\s*(?P<message>.*)'
                # Extract query duration for slow queries
                - regex:
                    expression: 'duration: (?P<duration>\d+\.\d+) ms'
                # Extract PGMQ queue operations
                - regex:
                    expression: 'queue:\s*(?P<queue_name>\w+)'
                # Extract autovacuum information
                - regex:
                    expression: 'automatic (?P<vacuum_type>vacuum|analyze) of table "(?P<table_name>[^"]+)"'
                # Set log level
                - labels:
                    level:
                    service: postgres
                    component: database
                # Add timestamp
                - timestamp:
                    source: timestamp
                    format: '2006-01-02 15:04:05.000 MST'
        relabel_configs:
          # Only collect PostgreSQL container logs
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: keep
            regex: postgresql
          - source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: __host__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            replacement: postgres-$1
            separator: /
            source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_name
            target_label: job
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container
          - replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
              - __meta_kubernetes_pod_uid
              - __meta_kubernetes_pod_container_name
            target_label: __path__

      # General Kubernetes pod logs (including DuckLake backend)
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - cri: {}
          # Enhanced parsing for DuckLake backend JSON logs
          - match:
              selector: '{container="ducklake-backend"}'
              stages:
                # Parse JSON structured logs from FastAPI
                - json:
                    expressions:
                      timestamp: timestamp
                      level: level
                      service: service
                      message: message
                      request_id: request_id
                      job_name: job_name
                      run_id: run_id
                      table_name: table_name
                      error: error
                # Set timestamp from JSON
                - timestamp:
                    source: timestamp
                    format: '2006-01-02T15:04:05.000000'
                # Add labels from JSON fields
                - labels:
                    level:
                    service:
                    component: backend
          # Parse other application logs
          - match:
              selector: '{container!="postgresql",container!="ducklake-backend"}'
              stages:
                # Basic log level extraction for other containers
                - regex:
                    expression: '(?i)(?P<level>debug|info|warn|warning|error|fatal|panic)'
                - labels:
                    level:
        relabel_configs:
          # Exclude PostgreSQL logs (handled by specific job above)
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: drop
            regex: postgresql
          - source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: __host__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            replacement: $1
            separator: /
            source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_name
            target_label: job
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container
          - replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
              - __meta_kubernetes_pod_uid
              - __meta_kubernetes_pod_container_name
            target_label: __path__

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: default
  labels:
    app: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccount: promtail
      containers:
      - name: promtail
        image: grafana/promtail:2.9.0
        args:
        - -config.file=/etc/promtail/promtail.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/promtail
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/containerd
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: config
        configMap:
          name: promtail-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/containerd

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
- kind: ServiceAccount
  name: promtail
  namespace: default