apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-config
  namespace: storage
  labels:
    app: docker-registry
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
        Access-Control-Allow-Methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH']
        Access-Control-Allow-Headers: ['*']
        Access-Control-Max-Age: [1728000]
        Access-Control-Allow-Credentials: [true]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    delete:
      enabled: true

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: registry-storage
  namespace: storage
  labels:
    app: docker-registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust based on your needs
  storageClassName: standard  # Use default storage class

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: storage
  labels:
    app: docker-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docker-registry
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
      containers:
      - name: registry
        image: registry:2.8.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: "/var/lib/registry"
        - name: REGISTRY_HTTP_ADDR
          value: "0.0.0.0:5000"
        - name: REGISTRY_LOG_LEVEL
          value: "info"
        - name: REGISTRY_STORAGE_DELETE_ENABLED
          value: "true"
        livenessProbe:
          httpGet:
            path: /v2/
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v2/
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: registry-storage
          mountPath: /var/lib/registry
        - name: registry-config
          mountPath: /etc/docker/registry
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: registry-storage
        persistentVolumeClaim:
          claimName: registry-storage
      - name: registry-config
        configMap:
          name: registry-config
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: storage
  labels:
    app: docker-registry
spec:
  type: ClusterIP
  selector:
    app: docker-registry
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      name: http

---
# NodePort service for external access during development
apiVersion: v1
kind: Service
metadata:
  name: docker-registry-nodeport
  namespace: storage
  labels:
    app: docker-registry
    type: external-access
spec:
  type: NodePort
  selector:
    app: docker-registry
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 30500  # External access via localhost:30500
      name: http 